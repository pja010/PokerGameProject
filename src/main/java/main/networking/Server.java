/* *****************************************
 * CSCI205 - Software Engineering and Design
 * Fall 2020
 * Instructor: Prof. Brian King
 *
 * Name: YOUR NAME
 * Section: YOUR SECTION
 * Date: 11/6/2020
 * Time: 11:59 AM
 *
 * Project: csci205FinalProject
 * Package: main.networking
 * Class: Server
 *
 * Description:
 *
 * ****************************************
 */
package main.networking;

import java.io.*;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

public class Server {
    private static final int PORT = 12346;
    private ServerSocket serverSock;
    private Socket clientSocket;

    /**
     * Constructor for TCPServer
     *
     * @see <a>https://moodle.bucknell.edu/mod/page/view.php?id=955938</a>
     * @author Lindsay Knupp, Andrew Whitig
     */
    public Server() {
        try {
            serverSock = new ServerSocket(PORT);
        } catch (IOException e) {
            System.out.println("Unable to establish connection. ");
        }
    }

    /**
     * Gets address of the host, ServerSocket
     * @return host address
     *
     * @author Andrew Whitig
     */
    public String getAddress(){
        InetAddress addr = null;
        try {
            addr = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            System.out.println("Oops");
        }
        return "" + addr.getHostAddress() ;
    }

    /**
     * Establishes connection to other player
     *
     * @param userName name of other player, client
     * @return message indicating server is connected to other player
     * @author Andrew Whitig, Lindsay Knupp
     */
    public String connectToOtherPlayer(String userName) {
        try {
            // Wait for a client to connect
            clientSocket = serverSock.accept();
            // User name from client
            String clientName = waitForMessage(clientSocket);
            String s = "Connected to: " + clientName;
            transmitMessage(clientSocket, userName);
            return s;
        }
        catch (IOException e) {
            return "Error in establishing connection or message not received from client.";
        }
    }

    /**
     * Sends secret code to client
     *
     * @param code secret code generated by SecretCodeGenerator
     * @author Andrew Whitig, Lindsay Knupp
     */
    public void sendSecretCode(String code) {
        try {
            transmitMessage(clientSocket, code);
        } catch (IOException e) {
            System.out.println("Error in transmitting message to client.");
        }
    }

    /**
     * Taken from class
     * Transmit message to the server as a {@link String} encoded into bytes
     * @see <a>https://moodle.bucknell.edu/mod/page/view.php?id=955938</a>
     *
     * @param socket is the socket we're using to send to
     * @param message the message to send
     */
    public void transmitMessage(Socket socket, String message) throws IOException {
        // Send as a sequence of bytes by using the getBytes
        PrintWriter out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()),true);
        out.println(message);
    }

    /**
     * Taken from class
     * Receive a response from the specified socket.
     * @see <a>https://moodle.bucknell.edu/mod/page/view.php?id=955938</a>
     *
     * @param socket is the socket we're listening for a response
     * @return the String message that we received
     */
    public String waitForMessage(Socket socket) throws IOException {
        String sBuffer;

        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        sBuffer = in.readLine();
        return sBuffer;
    }
}

