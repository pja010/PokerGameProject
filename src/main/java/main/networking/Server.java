/* *****************************************
 * CSCI205 - Software Engineering and Design
 * Fall 2020
 * Instructor: Prof. Brian King
 *
 * Name: Lindsay Knupp
 * Section: 01 - 11:30am
 * Date: 11/6/2020
 * Time: 11:59 AM
 *
 * Project: csci205FinalProject
 * Package: main.networking
 * Class: Server
 *
 * Description: Server methods for serving
 * as a remote host
 *
 * ****************************************
 */
package main.networking;

import java.io.*;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class Server {
    private static final int PORT = 12346;
    private ServerSocket serverSock;
    private Socket clientSocket;
    private static Scanner scnr = new Scanner(System.in);

    /**
     * Sets up networking protocol between server and client
     */
    public static void main(String[] args) {
        System.out.println("Please enter your name");
        String userName = scnr.next();
        System.out.println("Will you host or join a game? Enter H or J.");
        String willHost = scnr.next();
        // User is the host
        if (willHost.equals("H")) {
            // Create new TCPServer object
            Server host = new Server();
            // Get client address
            System.out.println(host.getAddress());
            // Connect to client
            System.out.println(host.connectToOtherPlayer(userName));
        }
        // User is the client
        else if (willHost.equals("J")) {
            System.out.println("Please enter host address.");
            String hostAddress = scnr.next();
            // Create new TCPClient object
            Client client = new Client(hostAddress);
            // Exchange names between server and client
            System.out.println(client.exchangeNames(userName));
        }
    }

    /**
     * Constructor for TCPServer
     *
     * @see <a>https://moodle.bucknell.edu/mod/page/view.php?id=955938</a>
     */
    public Server() {
        try {
            serverSock = new ServerSocket(PORT);
        } catch (IOException e) {
            System.out.println("Unable to establish connection. ");
        }
    }

    /**
     * Gets address of the host, ServerSocket
     * @return host address
     *
     */
    public String getAddress(){
        InetAddress addr = null;
        try {
            addr = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            System.out.println("Oops");
        }
        return "" + addr.getHostAddress() ;
    }

    /**
     * Establishes connection to other player
     *
     * @param userName name of other player, client
     * @return message indicating server is connected to other player
     */
    public String connectToOtherPlayer(String userName) {
        try {
            // Wait for a client to connect
            clientSocket = serverSock.accept();
            // User name from client
            String clientName = waitForMessage(clientSocket);
            String s = "Connected to: " + clientName;
            transmitMessage(clientSocket, userName);
            return s;
        }
        catch (IOException e) {
            return "Error in establishing connection or message not received from client.";
        }
    }

    /**
     * Sends secret code to client
     *
     * @param code secret code generated by SecretCodeGenerator
     */
    public void sendSecretCode(String code) {
        try {
            transmitMessage(clientSocket, code);
        } catch (IOException e) {
            System.out.println("Error in transmitting message to client.");
        }
    }

    /**
     * Taken from class
     * Transmit message to the server as a {@link String} encoded into bytes
     * @see <a>https://moodle.bucknell.edu/mod/page/view.php?id=955938</a>
     *
     * @param socket is the socket we're using to send to
     * @param message the message to send
     */
    public void transmitMessage(Socket socket, String message) throws IOException {
        // Send as a sequence of bytes by using the getBytes
        PrintWriter out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()),true);
        out.println(message);
    }

    /**
     * Taken from class
     * Receive a response from the specified socket.
     * @see <a>https://moodle.bucknell.edu/mod/page/view.php?id=955938</a>
     *
     * @param socket is the socket we're listening for a response
     * @return the String message that we received
     */
    public static String waitForMessage(Socket socket) throws IOException {
        String sBuffer;

        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        sBuffer = in.readLine();
        return sBuffer;
    }

}

